// Define the 23 Pacific Island countries with their coordinates
var pacificIslands = ee.FeatureCollection([
  ee.Feature(ee.Geometry.Point([-170.7, -14.3]), {name: 'American Samoa'}),
  ee.Feature(ee.Geometry.Point([-159.8, -21.2]), {name: 'Cook Islands'}),
  ee.Feature(ee.Geometry.Point([158.2, 6.9]), {name: 'Micronesia'}),
  ee.Feature(ee.Geometry.Point([178.1, -17.7]), {name: 'Fiji'}),
  ee.Feature(ee.Geometry.Point([-149.4, -17.6]), {name: 'French Polynesia'}),
  ee.Feature(ee.Geometry.Point([144.8, 13.4]), {name: 'Guam'}),
  ee.Feature(ee.Geometry.Point([173.0, 1.4]), {name: 'Kiribati'}),
  ee.Feature(ee.Geometry.Point([171.2, 7.1]), {name: 'Marshall Islands'}),
  ee.Feature(ee.Geometry.Point([145.7, 15.2]), {name: 'Northern Mariana Islands'}),
  ee.Feature(ee.Geometry.Point([166.9, -0.5]), {name: 'Nauru'}),
  ee.Feature(ee.Geometry.Point([165.6, -21.3]), {name: 'New Caledonia'}),
  ee.Feature(ee.Geometry.Point([174.9, -40.9]), {name: 'New Zealand'}),
  ee.Feature(ee.Geometry.Point([-169.9, -19.1]), {name: 'Niue'}),
  ee.Feature(ee.Geometry.Point([145.2, -6.3]), {name: 'Papua New Guinea'}),
  ee.Feature(ee.Geometry.Point([134.5, 7.5]), {name: 'Palau'}),
  ee.Feature(ee.Geometry.Point([-130.1, -25.07]), {name: 'Pitcairn Islands'}),
  ee.Feature(ee.Geometry.Point([-172.1, -13.6]), {name: 'Samoa'}),
  ee.Feature(ee.Geometry.Point([160.2, -9.6]), {name: 'Solomon Islands'}),
  ee.Feature(ee.Geometry.Point([-171.8, -9.2]), {name: 'Tokelau'}),
  ee.Feature(ee.Geometry.Point([-175.2, -21.2]), {name: 'Tonga'}),
  ee.Feature(ee.Geometry.Point([178.7, -7.1]), {name: 'Tuvalu'}),
  ee.Feature(ee.Geometry.Point([166.9, -15.4]), {name: 'Vanuatu'}),
  ee.Feature(ee.Geometry.Point([-178.1, -14.3]), {name: 'Wallis & Futuna'})
]);

// Create 10km buffer around each country point
var bufferedIslands = pacificIslands.map(function(feature) {
  return feature.buffer(10000).set('name', feature.get('name'));
});

// Set date range
var startDate = '2011-01-03';
var endDate = '2011-01-10';

// Daily mean 2m air temperature
var era5_2mt = ee.ImageCollection('ECMWF/ERA5/DAILY')
                  .select('mean_2m_air_temperature')
                  .filter(ee.Filter.date(startDate, endDate));

// Daily total precipitation sums
var era5_tp = ee.ImageCollection('ECMWF/ERA5/DAILY')
                 .select('total_precipitation')
                 .filter(ee.Filter.date(startDate, endDate));

// Function to convert Kelvin to Celsius for temperature data
var kelvinToCelsius = function(image) {
  return image.subtract(273.15).set(
      'system:time_start', image.get('system:time_start'));
};

// Apply Kelvin to Celsius conversion
var era5_2mt_celsius = era5_2mt.map(kelvinToCelsius);

// Create a list of all the dates in the time range
var dateList = era5_2mt.map(function(image) {
  return ee.Feature(null, {
    'date': ee.Date(image.get('system:time_start')).format('YYYY-MM-dd')
  });
}).distinct('date').aggregate_array('date');

// Function to extract data for a single date and all islands
var extractDataForDate = function(date, collection, bandName) {
  // Filter the collection to the specific date
  var image = collection
    .filter(ee.Filter.eq('system:time_start', ee.Date.parse('YYYY-MM-dd', date).millis()))
    .first();
  
  // Extract data for each island
  var islandsData = bufferedIslands.map(function(island) {
    var stats = image.reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: island.geometry(),
      scale: 10000,
      maxPixels: 1e9
    });
    
    return ee.Feature(null, {
      'country': island.get('name'),
      'date': date,
      'value': stats.get(bandName)
    });
  });
  
  return islandsData;
};

// Extract temperature data for all dates
var temperatureData = ee.FeatureCollection(dateList.map(function(date) {
  return extractDataForDate(date, era5_2mt_celsius, 'mean_2m_air_temperature');
})).flatten();

// Extract precipitation data for all dates
var precipitationData = ee.FeatureCollection(dateList.map(function(date) {
  return extractDataForDate(date, era5_tp, 'total_precipitation');
})).flatten();

// Export data for all islands
Export.table.toDrive({
  collection: temperatureData,
  description: 'PICT_temperature_2011wk1',
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: precipitationData,
  description: 'PICT_precipitation_2011wk1',
  fileFormat: 'CSV'
});

// Visualization palettes
var visTempC = {
  min: 15,
  max: 35,
  palette: [
    '000080', '0000d9', '4000ff', '8000ff', '0080ff', '00ffff', '00ff80',
    '80ff00', 'daff00', 'ffff00', 'fff500', 'ffda00', 'ffb000', 'ffa400',
    'ff4f00', 'ff2500', 'ff0a00', 'ff00ff'
  ]
};

var visTp = {
  min: 0.0,
  max: 0.1,
  palette: ['ffffff', '00ffff', '0080ff', 'da00ff', 'ffa400', 'ff0000']
};

// Sample date for visualization
var sampleDate = '2011-01-06';

// Center map on Pacific region
Map.setCenter(170, -10, 3);

// Add island buffers to map
Map.addLayer(bufferedIslands, {color: 'white'}, 'Pacific Islands (10km buffer)');

// Add temperature layer
Map.addLayer(
    era5_2mt_celsius.filter(ee.Filter.date(sampleDate)).first(), visTempC,
    'Daily mean 2m air temperature (°C)');

// Add precipitation layer
Map.addLayer(
    era5_tp.filter(ee.Filter.date(sampleDate)).first(), visTp,
    'Daily total precipitation');

// Print sample data from a few islands
var sampleTemp = era5_2mt_celsius.filter(ee.Filter.date(sampleDate)).first();
var samplePrecip = era5_tp.filter(ee.Filter.date(sampleDate)).first();

// Create a list of islands to sample
var sampleIslands = ['American Samoa', 'Fiji', 'New Zealand', 'Pitcairn Islands'];

// Print sample values for the sample islands
sampleIslands.forEach(function(islandName) {
  var island = bufferedIslands.filter(ee.Filter.eq('name', islandName)).first();
  
  var tempValue = sampleTemp.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: island.geometry(),
    scale: 10000,
    maxPixels: 1e9
  });
  
  var precipValue = samplePrecip.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: island.geometry(),
    scale: 10000,
    maxPixels: 1e9
  });
  
  print(islandName + ' (2011-01-06):');
  print('  Temperature (°C): ' + tempValue.get('mean_2m_air_temperature'));
  print('  Precipitation (m): ' + precipValue.get('total_precipitation'));
});

// Print total number of data points that will be exported
print('Number of islands:', bufferedIslands.size());
print('Number of dates:', dateList.length());
